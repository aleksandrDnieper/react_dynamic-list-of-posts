{"version":3,"sources":["utils/api.ts","constants/api.ts","components/User/User.tsx","components/Comment/Comment.tsx","components/CommentList/CommentList.tsx","components/Post/Post.tsx","components/PostList/PostList.tsx","index.tsx","App.tsx"],"names":["getDataFromServer","url","a","fetch","data","json","getUsers","users","getComments","comments","getPosts","posts","getPostsWithUserAndComments","Promise","all","postsWithUserAndComments","map","post","user","find","person","id","userId","commentsByUser","filter","article","postId","User","className","name","email","address","zipcode","street","city","Comment","comment","body","CommentList","key","Post","title","PostList","ReactDOM","render","useState","setPosts","isLoaded","setIsLoaded","query","setQuery","handleStart","filteredPosts","console","error","searchedPosts","useMemo","includes","searchCallback","length","type","placeholder","onChange","event","target","value","toLowerCase","onClick","document","getElementById"],"mappings":"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","file":"static/js/main.82f1cadb.chunk.js","sourcesContent":["import {\n  BASE_URL,\n  USERS_URL,\n  POSTS_URL,\n  COMMENTS_URL,\n} from '../constants/api';\n\nimport {\n  UserInterface,\n  PostInterface,\n  CommentInterface,\n  PostsWithUserAndComments,\n} from '../constants/types';\n\nconst getDataFromServer = async <T>(url: string): Promise<T> => {\n  const data = await fetch(`${BASE_URL}${url}`);\n\n  return data.json();\n};\n\nconst getUsers: () => Promise<UserInterface[]> = async () => {\n  const users = await getDataFromServer<UserInterface[]>(USERS_URL);\n\n  return users;\n};\n\nconst getComments: () => Promise<CommentInterface[]> = async () => {\n  const comments = await getDataFromServer<CommentInterface[]>(COMMENTS_URL);\n\n  return comments;\n};\n\nconst getPosts: () => Promise<PostInterface[]> = async () => {\n  const posts = await getDataFromServer<PostInterface[]>(POSTS_URL);\n\n  return posts;\n};\n\nexport const getPostsWithUserAndComments: () => Promise<PostsWithUserAndComments[]> = async () => {\n  const [users, comments, posts] = await Promise.all([\n    getUsers(),\n    getComments(),\n    getPosts(),\n  ]);\n\n  const postsWithUserAndComments = posts.map((post: PostInterface) => {\n    const user = users\n      .find((person: UserInterface) => person.id === post.userId) as UserInterface;\n    const commentsByUser = comments\n      .filter((article: CommentInterface) => article.postId === post.id) as CommentInterface[];\n\n    return {\n      ...post,\n      user,\n      comments: commentsByUser,\n    };\n  });\n\n  return postsWithUserAndComments;\n};\n\nexport function searchCallback(query: string) {\n  return (post: PostsWithUserAndComments) => post.title.includes(query)\n    || post.body.includes(query);\n}\n","export const BASE_URL = 'https://jsonplaceholder.typicode.com';\nexport const POSTS_URL = '/posts';\nexport const USERS_URL = '/users';\nexport const COMMENTS_URL = '/comments';\n","import React, { FC } from 'react';\nimport { UserInterface } from '../../constants/types';\n\ninterface Props {\n  user: UserInterface;\n}\n\nexport const User: FC<Props> = ({ user }) => {\n  return (\n    <div className=\"user\">\n      <p>Contact info:</p>\n      <p>{`name: ${user.name}, email: ${user.email}`}</p>\n      <p>{`address: ${user.address.zipcode}, ${user.address.street}, ${user.address.city}`}</p>\n    </div>\n  );\n};\n","import React, { FC } from 'react';\nimport { CommentInterface } from '../../constants/types';\n\ninterface Props {\n  comment: CommentInterface;\n}\n\nexport const Comment: FC<Props> = ({ comment }) => {\n  return (\n    <div className=\"card text-white bg-info mb-3\">\n      <h3 className=\"card-header\">\n        {comment.name}\n      </h3>\n      <div className=\"card-body\">\n        <blockquote className=\"blockquote mb-0\">\n          <p>\n            {comment.body}\n          </p>\n          <footer className=\"blockquote-footer\">\n            {comment.email}\n          </footer>\n        </blockquote>\n      </div>\n    </div>\n  );\n};\n","import React, { FC } from 'react';\nimport { Comment } from '../Comment/Comment';\nimport { CommentInterface } from '../../constants/types';\n\ninterface Props {\n  comments: CommentInterface[];\n}\n\nexport const CommentList: FC<Props> = ({ comments }) => {\n  return (\n    <div className=\"commentList\">\n      <div className=\"comments\">\n        {\n          comments.map(comment => (\n            <Comment key={comment.id} comment={comment} />\n          ))\n        }\n      </div>\n    </div>\n  );\n};\n","import React, { FC } from 'react';\nimport { PostsWithUserAndComments } from '../../constants/types';\nimport { User } from '../User/User';\nimport { CommentList } from '../CommentList/CommentList';\n\ninterface Props {\n  post: PostsWithUserAndComments;\n}\n\nexport const Post: FC<Props> = ({ post }) => {\n  return (\n    <div className=\"list__item\">\n      <div className=\"card\">\n        <h4 className=\"card-header\">{post.title}</h4>\n        <div className=\"card-body\">\n\n          <blockquote className=\"blockquote mb-0\">\n            <p>\n              {post.body}\n            </p>\n            <footer className=\"blockquote-footer\">\n              <User user={post.user} />\n            </footer>\n          </blockquote>\n          <CommentList comments={post.comments} />\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React, { FC } from 'react';\nimport { PostsWithUserAndComments } from '../../constants/types';\nimport { Post } from '../Post/Post';\n\ninterface Props {\n  posts: PostsWithUserAndComments[];\n}\n\nexport const PostList: FC<Props> = ({ posts }) => {\n  return (\n    <div className=\"list\">\n      {\n        posts.map((post) => <Post key={post.id} post={post} />)\n      }\n    </div>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n","import React, { FC, useMemo, useState } from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport { getPostsWithUserAndComments, searchCallback } from './utils/api';\nimport { PostsWithUserAndComments } from './constants/types';\nimport { PostList } from './components/PostList/PostList';\n\nexport const App: FC = () => {\n  const [posts, setPosts] = useState<PostsWithUserAndComments[]>([]);\n  const [isLoaded, setIsLoaded] = useState<boolean>(false);\n  const [query, setQuery] = useState<string>('');\n\n  const handleStart = async () => {\n    try {\n      setIsLoaded(true);\n      const filteredPosts = await getPostsWithUserAndComments();\n\n      setPosts(filteredPosts);\n    } catch (e) {\n      // eslint-disable-next-line no-console\n      console.error(e);\n    } finally {\n      setIsLoaded(false);\n    }\n  };\n\n  const handleSearch = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { target } = event;\n\n    setQuery(target.value.toLowerCase());\n  };\n\n  const searchedPosts = useMemo(() => posts.filter(searchCallback(query)), [posts, query]);\n\n  return (\n    <div className=\"app\">\n      {!posts.length\n        ? (\n          <>\n            <h1>Dynamic list of posts</h1>\n            <button\n              type=\"button\"\n              className=\"btn btn-primary\"\n              onClick={handleStart}\n            >\n              {isLoaded ? 'Loading.......' : 'Start load'}\n            </button>\n          </>\n        )\n        : (\n          <>\n            <input\n              type=\"text\"\n              id=\"input\"\n              className=\"form-control\"\n              placeholder=\"type search\"\n              onChange={handleSearch}\n            />\n            <PostList posts={query ? searchedPosts : posts} />\n          </>\n        )}\n    </div>\n  );\n};\n"],"sourceRoot":""}